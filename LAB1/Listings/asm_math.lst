


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             text, CODE, READONLY
    2 00000000                 EXPORT           asm_math
    3 00000000         
    4 00000000         ; R0: pointer to the input data array / returned max ind
                       ex
    5 00000000         ; R1: pointer to output array / returned min index
    6 00000000         ; R2: input array length
    7 00000000         
    8 00000000         ; R3: current index in loop over array
    9 00000000         ; R4: current max index
   10 00000000         ; R5: current min index
   11 00000000         
   12 00000000         ; S0: current array value / square of current value (for
                        RMS) / returned RMS value
   13 00000000         ; S1: current max value / returned max value
   14 00000000         ; S2: current min value / returned min value
   15 00000000         ; S3: running sum of squares (for RMS)
   16 00000000         ; S4: input array length (converted to floating point)
   17 00000000         
   18 00000000         asm_math
   19 00000000 F04F 0300       MOV              R3, #0
   20 00000004         
   21 00000004         start_loop
   22 00000004 4293            CMP              R3, R2      ; check if the end 
                                                            of the array is rea
                                                            ched in the loop
   23 00000006 D019            BEQ              store_result ; branch to store 
                                                            results   
   24 00000008         
   25 00000008 ED90 0A00       VLDR.f32         S0, [R0, #0] ; load S0 with the
                                                             current array valu
                                                            e
   26 0000000C         
   27 0000000C EEB4 0A60       VCMP.f32         S0, S1      ; compare current a
                                                            rray value to curre
                                                            nt max
   28 00000010 DC03            BGT              update_max  ; branch to update 
                                                            max if current valu
                                                            e is greater
   29 00000012         
   30 00000012 EEB4 0A41       VCMP.f32         S0, S2      ; compare current a
                                                            rray value to curre
                                                            nt min
   31 00000016 DB04            BLT              update_min  ; branch to update 
                                                            min if current valu
                                                            e is smaller
   32 00000018         
   33 00000018 E007            B                end_loop    ; branch to the end
                                                             of loop operations
                                                            
   34 0000001A         
   35 0000001A         update_max
   36 0000001A EEF0 0A40       VMOV.f32         S1, S0      ; move current valu
                                                            e to the max value 
                                                            register
   37 0000001E 461C            MOV              R4, R3      ; move current inde
                                                            x to the max index 
                                                            register
   38 00000020 E003            B                end_loop



ARM Macro Assembler    Page 2 


   39 00000022         
   40 00000022         update_min
   41 00000022 EEB0 1A40       VMOV.f32         S2, S0      ; move current valu
                                                            e to the min value 
                                                            register
   42 00000026 461D            MOV              R5, R3      ; move current valu
                                                            e to the min index 
                                                            register
   43 00000028 E7FF            B                end_loop
   44 0000002A         
   45 0000002A         end_loop
   46 0000002A EE20 0A00       VMUL.f32         S0, S0, S0  ; square array valu
                                                            e
   47 0000002E EE71 1A80       VADD.f32         S3, S3, S0  ; add to running su
                                                            m of squares
   48 00000032 F103 0304       ADD              R3, R3, #4  ; increment current
                                                             index of loop
   49 00000036 F100 0004       ADD              R0, R0, #4  ; increase input ar
                                                            ray memory address
   50 0000003A E7E3            B                start_loop  ; branch back to th
                                                            e start of the loop
                                                            
   51 0000003C         
   52 0000003C         store_result
   53 0000003C 4620            MOV              R0, R4      ; move max index to
                                                             R0
   54 0000003E 4629            MOV              R1, R5      ; move min index to
                                                             R1
   55 00000040         
   56 00000040 EE02 2A10       VMOV.f32         S4, R2      ; convert input arr
                                                            ay length to floati
                                                            ng point
   57 00000044 EE81 0A82       VDIV.f32         S0, S3, S4  ; divide sum of squ
                                                            ares by length of a
                                                            rray (todo; convert
                                                             R2 to floating poi
                                                            nt?)
   58 00000048 EEB1 0AC0       VSQRT.f32        S0, S0      ; take square root 
                                                            to obtain RMS value
                                                             in S0
   59 0000004C         
   60 0000004C ED81 0A00       VSTR.f32         S0, [R1, #0] ; store the RMS va
                                                            lue in the output a
                                                            rray
   61 00000050 EDC1 0A01       VSTR.f32         S1, [R1, #4] ; store the max va
                                                            lue in the output a
                                                            rray
   62 00000054 ED81 1A02       VSTR.f32         S2, [R1, #8] ; store the min va
                                                            lue in the output a
                                                            rray
   63 00000058 60CC            STR              R4, [R1, #12] ; store the max i
                                                            ndex in the output 
                                                            array
   64 0000005A 610D            STR              R5, [R1, #16] ; store the min i
                                                            ndex in the output 
                                                            array
   65 0000005C         
   66 0000005C E7FF            B                exit        ; branch to exit th
                                                            e subroutine



ARM Macro Assembler    Page 3 


   67 0000005E         
   68 0000005E         exit
   69 0000005E 4770            BX               LR          ; branch to next in
                                                            struction
   70 00000060                 END                          ; end subroutine
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\asm_math.d -o.\objects\asm_math.o -I.\RTE\_Target_1 -
IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\S
TM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__EV
AL SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" 
--predefine="STM32F407xx SETA 1" --list=.\listings\asm_math.lst asm_math.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

asm_math 00000000

Symbol: asm_math
   Definitions
      At line 18 in file asm_math.s
   Uses
      At line 2 in file asm_math.s
Comment: asm_math used once
end_loop 0000002A

Symbol: end_loop
   Definitions
      At line 45 in file asm_math.s
   Uses
      At line 33 in file asm_math.s
      At line 38 in file asm_math.s
      At line 43 in file asm_math.s

exit 0000005E

Symbol: exit
   Definitions
      At line 68 in file asm_math.s
   Uses
      At line 66 in file asm_math.s
Comment: exit used once
start_loop 00000004

Symbol: start_loop
   Definitions
      At line 21 in file asm_math.s
   Uses
      At line 50 in file asm_math.s
Comment: start_loop used once
store_result 0000003C

Symbol: store_result
   Definitions
      At line 52 in file asm_math.s
   Uses
      At line 23 in file asm_math.s
Comment: store_result used once
text 00000000

Symbol: text
   Definitions
      At line 1 in file asm_math.s
   Uses
      None
Comment: text unused
update_max 0000001A

Symbol: update_max
   Definitions
      At line 35 in file asm_math.s
   Uses
      At line 28 in file asm_math.s
Comment: update_max used once
update_min 00000022



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: update_min
   Definitions
      At line 40 in file asm_math.s
   Uses
      At line 31 in file asm_math.s
Comment: update_min used once
8 symbols
343 symbols in table
