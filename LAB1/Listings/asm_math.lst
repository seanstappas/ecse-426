


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             text, CODE, READONLY
    2 00000000                 EXPORT           asm_math
    3 00000000         
    4 00000000         ; R0: pointer to the input data array
    5 00000000         ; R1: pointer to output array
    6 00000000         ; R2: input array length
    7 00000000         
    8 00000000         ; R3: current index in loop over array
    9 00000000         ; R4: current max index
   10 00000000         ; R5: current min index
   11 00000000         
   12 00000000         ; S0: current array value / square of current value (for
                        RMS) / returned RMS value
   13 00000000         ; S1: current max value / returned max value
   14 00000000         ; S2: current min value / returned min value
   15 00000000         ; S3: running sum of squares (for RMS)
   16 00000000         ; S4: input array length (converted to floating point)
   17 00000000         
   18 00000000         asm_math
   19 00000000 EDD0 0A00       VLDR.f32         S1, [R0, #0] ; set initial max 
                                                            value to first elem
                                                            ent of array
   20 00000004 ED90 1A00       VLDR.f32         S2, [R0, #0] ; set initial min 
                                                            value to first elem
                                                            ent of array
   21 00000008 F04F 0300       MOV              R3, #0      ; clear R3 (for cur
                                                            rent index in array
                                                            )
   22 0000000C F04F 0400       MOV              R4, #0      ; clear R4 (for cur
                                                            rent max index in a
                                                            rray)
   23 00000010 F04F 0500       MOV              R5, #0      ; clear R5 (for cur
                                                            rent min index in a
                                                            rray)
   24 00000014 EE01 3A90       VMOV.f32         S3, R3      ; clear S3
   25 00000018         
   26 00000018         start_loop
   27 00000018 4293            CMP              R3, R2      ; check if the end 
                                                            of the array is rea
                                                            ched in the loop
   28 0000001A D01D            BEQ              store_result ; branch to store 
                                                            results   
   29 0000001C         
   30 0000001C ED90 0A00       VLDR.f32         S0, [R0, #0] ; load S0 with the
                                                             current array valu
                                                            e
   31 00000020         
   32 00000020 EEB4 0A60       VCMP.f32         S0, S1      ; compare current a
                                                            rray value to curre
                                                            nt max
   33 00000024 EEF1 FA10       VMRS.f32         APSR_nzcv, FPSCR ; get the comp
                                                            arison flags into A
                                                            PSR
   34 00000028 DC05            BGT              update_max  ; branch to update 
                                                            max if current valu
                                                            e is greater
   35 0000002A         
   36 0000002A EEB4 0A41       VCMP.f32         S0, S2      ; compare current a
                                                            rray value to curre



ARM Macro Assembler    Page 2 


                                                            nt min
   37 0000002E EEF1 FA10       VMRS.f32         APSR_nzcv, FPSCR ; get the comp
                                                            arison flags into A
                                                            PSR
   38 00000032 DB04            BLT              update_min  ; branch to update 
                                                            min if current valu
                                                            e is smaller
   39 00000034         
   40 00000034 E007            B                end_loop    ; branch to the end
                                                             of loop operations
                                                            
   41 00000036         
   42 00000036         update_max
   43 00000036 EEF0 0A40       VMOV.f32         S1, S0      ; move current valu
                                                            e to the max value 
                                                            register
   44 0000003A 461C            MOV              R4, R3      ; move current inde
                                                            x to the max index 
                                                            register
   45 0000003C E003            B                end_loop
   46 0000003E         
   47 0000003E         update_min
   48 0000003E EEB0 1A40       VMOV.f32         S2, S0      ; move current valu
                                                            e to the min value 
                                                            register
   49 00000042 461D            MOV              R5, R3      ; move current valu
                                                            e to the min index 
                                                            register
   50 00000044 E7FF            B                end_loop
   51 00000046         
   52 00000046         end_loop
   53 00000046 EE20 0A00       VMUL.f32         S0, S0, S0  ; square array valu
                                                            e
   54 0000004A EE71 1A80       VADD.f32         S3, S3, S0  ; add to running su
                                                            m of squares
   55 0000004E F103 0301       ADD              R3, R3, #1  ; increment current
                                                             index of loop
   56 00000052 F100 0004       ADD              R0, R0, #4  ; increase input ar
                                                            ray memory address
   57 00000056 E7DF            B                start_loop  ; branch back to th
                                                            e start of the loop
                                                            
   58 00000058         
   59 00000058         store_result
   60 00000058 EE02 2A10       VMOV.f32         S4, R2      ; move array length
                                                             to floating point 
                                                            register
   61 0000005C EEB8 2AC2       VCVT.f32.s32     S4, S4      ; convert array len
                                                            gth from integer to
                                                             floating point
   62 00000060         
   63 00000060 EE81 0A82       VDIV.f32         S0, S3, S4  ; divide sum of squ
                                                            ares by length of a
                                                            rray
   64 00000064 EEB1 0AC0       VSQRT.f32        S0, S0      ; take square root 
                                                            to obtain RMS value
                                                             in S0
   65 00000068         
   66 00000068 ED81 0A00       VSTR.f32         S0, [R1, #0] ; store the RMS va



ARM Macro Assembler    Page 3 


                                                            lue in the output a
                                                            rray
   67 0000006C EDC1 0A01       VSTR.f32         S1, [R1, #4] ; store the max va
                                                            lue in the output a
                                                            rray
   68 00000070 ED81 1A02       VSTR.f32         S2, [R1, #8] ; store the min va
                                                            lue in the output a
                                                            rray
   69 00000074         
   70 00000074 EE00 4A10       VMOV.f32         S0, R4      ; move max index to
                                                             floating point reg
                                                            ister
   71 00000078 EEB8 0AC0       VCVT.f32.s32     S0, S0      ; convert max index
                                                             from integer to fl
                                                            oating point
   72 0000007C ED81 0A03       VSTR.f32         S0, [R1, #12] ; store the max i
                                                            ndex in the output 
                                                            array
   73 00000080         
   74 00000080 EE00 5A10       VMOV.f32         S0, R5      ; move min index to
                                                             floating point reg
                                                            ister
   75 00000084 EEB8 0AC0       VCVT.f32.s32     S0, S0      ; convert min index
                                                             from integer to fl
                                                            oating point
   76 00000088 ED81 0A04       VSTR.f32         S0, [R1, #16] ; store the min i
                                                            ndex in the output 
                                                            array
   77 0000008C         
   78 0000008C E7FF            B                exit        ; branch to exit th
                                                            e subroutine
   79 0000008E         
   80 0000008E         exit
   81 0000008E 4770            BX               LR          ; branch to next in
                                                            struction
   82 00000090                 END                          ; end subroutine
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\asm_math.d -o.\objects\asm_math.o -I.\RTE\_Target_1 -
IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\S
TM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__EV
AL SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" 
--predefine="STM32F407xx SETA 1" --list=.\listings\asm_math.lst asm_math.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

asm_math 00000000

Symbol: asm_math
   Definitions
      At line 18 in file asm_math.s
   Uses
      At line 2 in file asm_math.s
Comment: asm_math used once
end_loop 00000046

Symbol: end_loop
   Definitions
      At line 52 in file asm_math.s
   Uses
      At line 40 in file asm_math.s
      At line 45 in file asm_math.s
      At line 50 in file asm_math.s

exit 0000008E

Symbol: exit
   Definitions
      At line 80 in file asm_math.s
   Uses
      At line 78 in file asm_math.s
Comment: exit used once
start_loop 00000018

Symbol: start_loop
   Definitions
      At line 26 in file asm_math.s
   Uses
      At line 57 in file asm_math.s
Comment: start_loop used once
store_result 00000058

Symbol: store_result
   Definitions
      At line 59 in file asm_math.s
   Uses
      At line 28 in file asm_math.s
Comment: store_result used once
text 00000000

Symbol: text
   Definitions
      At line 1 in file asm_math.s
   Uses
      None
Comment: text unused
update_max 00000036

Symbol: update_max
   Definitions
      At line 42 in file asm_math.s
   Uses
      At line 34 in file asm_math.s
Comment: update_max used once
update_min 0000003E



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: update_min
   Definitions
      At line 47 in file asm_math.s
   Uses
      At line 38 in file asm_math.s
Comment: update_min used once
8 symbols
343 symbols in table
